{"version":3,"sources":["components/common/tableHeader.jsx","components/common/tableBody.jsx","components/common/table.jsx","components/earthquakesTable.jsx","components/common/pagination.jsx","feeds/httpService.js","feeds/earthquakeQuery.js","dataProcessing/extractEarthquakeData.js","utils/dynamicPagesize.js","dataProcessing/pagingEarthquakeData.js","utils/paginate.js","components/earthquakeDateRangeInput.jsx","components/common/searchBox.jsx","components/common/selectReact.jsx","components/earthquakeTableFilter.jsx","components/earthquakes.jsx","hooks/useFetchEarthquakeData.js","hooks/usePagingEarthquakes.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","raiseSort","path","sortColumn","Object","objectSpread","_this","props","order","onSort","renderSortIcon","column","react_default","a","createElement","index_es","icon","_this2","this","columns","map","className","key","onClick","label","Component","createId","item","concat","id","TableBody","_ref","data","content","_","get","renderCell","renderRows","Table","tableHeader","tableBody","earthquakesTable","earthquakedata","table","earthquake","href","url","target","rel","place","Pagination","itemsCount","pageSize","currentPage","onPageChange","pagesCount","Math","ceil","pages","range","page","axios","defaults","baseURL","process","interceptors","response","use","error","status","toast","Promise","reject","httpService","apiEndpoint","apiFormat","getEarthquakes","queryParams","http","earthquakeUrl","extractEarthquakeData","magList","magTypeList","extractedEarthquakeData","extractedProperties","pick","properties","timeFormatted","dateTime","date","Date","time","local","showTimeZone","geoType","geometry","type","geo","coordinates","magSelectionHook","trunc","mag","push","magType","sortBy","sortedUniqBy","floor","compact","pagingEarthquakeData","paging","currentpage","allData","selectedMagitude","selectedMagitudeType","searchQuery","sortcolumn","filtered","console","log","length","filter","toLowerCase","includes","toLocaleLowerCase","sorted","orderBy","filteredCount","pagesize","totalRecords","_i","_tryRecordsPerPage","current","dynamicPageSize","pagedData","items","pageNumber","arguments","undefined","startIndex","drop","slice","paginate","earthquakeDateRangeInput","fromDate","toDate","onChangeFromDate","onChangeToDate","onSubmit","react","e","htmlFor","DayPickerInput_default","placeholder","onDayChange","day","moment","format","SearchBox","value","onChange","name","currentTarget","SelectReact","options","rest","objectWithoutProperties","optionsReact","option","newOption","react_select_esm","assign","earthquakeTableFilter","onChangeMagitude","optionsMagList","onChangeMagitudeType","optionsMagTypeList","onChangeSearchQuery","selectReact","searchBox","earthquakes","defaultStartDate","subtract","defaultEndDate","_useState","useState","_useState2","slicedToArray","starttime","setStarttime","_useState3","_useState4","endtime","setEndtime","_useState5","_useState6","startTimeInput","setStartTimeInput","_useState7","_useState8","endTimeInput","setEndtimeTimeInput","_useState9","_useState10","setSelectedMagitude","_useState11","_useState12","setSelectedMagitudeType","_useState13","_useState14","setCurrentpage","_useState15","_useState16","setSortcolumn","_useState17","_useState18","setSearchQuery","_useFetchEarthquakeDa","_ref2","queryString","setEarthquakedata","count","setCount","title","setTitle","loading","setLoading","setMagList","setMagTypeList","useEffect","_fetchData","asyncToGenerator","regenerator_default","mark","_callee","result","_result$data","metadata","_extractEarthquakeDat","wrap","_context","prev","next","sent","t0","abrupt","features","generated","stop","apply","fetchData","useFetchEarthquakeData","_usePagingEarthquakes","pagedEarthquakeData","setPagedEarthquakedata","filteredcount","setFilteredcount","setPagesize","_paging","usePagingEarthquakes","handlePageChange","event","preventDefault","pagination","library","add","faCaretUp","faCaretDown","App","state","react_toastify","react_router","component","Earthquakes","exact","from","to","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23bf4f89.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass TableHeader extends Component {\n  raiseSort = path => {\n    const sortColumn = { ...this.props.sortColumn };\n    if (sortColumn.path === path)\n      sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\n    else {\n      sortColumn.path = path;\n      sortColumn.order = \"asc\";\n    }\n    this.props.onSort(sortColumn);\n  };\n\n  renderSortIcon = column => {\n    const { sortColumn } = this.props;\n\n    if (column.path !== sortColumn.path) return null;\n    if (sortColumn.order === \"asc\")\n      return <FontAwesomeIcon icon={[\"fas\", \"caret-up\"]} />;\n    return <FontAwesomeIcon icon={[\"fas\", \"caret-down\"]} />;\n  };\n\n  render() {\n    return (\n      <thead>\n        <tr>\n          {this.props.columns.map(column => (\n            <th\n              className=\"clickable\"\n              key={column.path || column.key}\n              onClick={() => this.raiseSort(column.path)}\n            >\n              {column.label} {this.renderSortIcon(column)}\n            </th>\n          ))}\n        </tr>\n      </thead>\n    );\n  }\n}\n\nexport default TableHeader;\n","import React from \"react\";\nimport _ from \"lodash\";\n\nconst TableBody = ({ data, columns }) => (\n  <tbody>{renderRows(data, columns)}</tbody>\n);\n\nfunction renderRows(data, columns) {\n  return data.map(item => (\n    <tr key={item.id}>\n      {columns.map(column => (\n        <td key={createId(item, column)} id={createId(item, column)}>\n          {renderCell(item, column)}\n        </td>\n      ))}\n    </tr>\n  ));\n}\n\nfunction renderCell(item, column) {\n  if (column.content) return column.content(item);\n  return _.get(item, column.path);\n}\n\nfunction createId(item, column) {\n  return `${item.id}_${column.path || column.key}`;\n}\n\nexport default TableBody;\n","import React from \"react\";\nimport TableHeader from \"./tableHeader\";\nimport TableBody from \"./tableBody\";\n\nconst Table = ({ columns, sortColumn, onSort, data }) => {\n  return (\n    <table className=\"table\">\n      <TableHeader columns={columns} sortColumn={sortColumn} onSort={onSort} />\n      <TableBody columns={columns} data={data} />\n    </table>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\nimport Table from \"./common/table\";\n\nexport default props => {\n  const { earthquakedata, onSort, sortColumn } = props;\n  return (\n    <Table\n      columns={getColumns()}\n      data={earthquakedata}\n      sortColumn={sortColumn}\n      onSort={onSort}\n    />\n  );\n};\n\nfunction getColumns() {\n  return [\n    {\n      path: \"place\",\n      label: \"Location\",\n      content: earthquake => (\n        <a href={earthquake.url} target=\"_blank\" rel=\"noopener noreferrer\">\n          {earthquake.place}\n        </a>\n      )\n    },\n    { path: \"timeFormatted\", label: \"Event Time\" },\n    { path: \"mag\", label: \"Magitude\" },\n    { path: \"magType\", label: \"MagType\" }\n  ];\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nconst Pagination = ({ itemsCount, pageSize, currentPage, onPageChange }) => {\n  const pagesCount = Math.ceil(itemsCount / pageSize);\n  if (pagesCount === 1) return null;\n  //create an array from 1 to pagesCount\n  const pages = _.range(1, pagesCount + 1);\n\n  return (\n    <nav>\n      <ul className=\"pagination\">\n        {pages.map(page => (\n          <li\n            key={page}\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\n          >\n            <a\n              onClick={() => onPageChange(page)}\n              className=\"page-link\"\n              href=\"##\"\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nPagination.propTypes = {\n  itemsCount: PropTypes.number.isRequired,\n  pageSize: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired\n};\n\nexport default Pagination;\n","import axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\naxios.defaults.baseURL = process.env.REACT_APP_API;\n\naxios.interceptors.response.use(null, error => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n  if (!expectedError) {\n    toast.error(\"An unexpected error occured\");\n  }\n  return Promise.reject(error);\n});\n\nexport default {\n  get: axios.get\n};\n","import http from \"./httpService\";\n\nconst apiEndpoint = \"/query\";\nconst apiFormat = \"geojson\";\n\nfunction earthquakeUrl(queryParams) {\n  return `${apiEndpoint}?format=${apiFormat}&${queryParams}`;\n}\n\nexport function getEarthquakes(queryParams) {\n  return http.get(earthquakeUrl(queryParams));\n}\n","import _ from \"lodash\";\nimport dateTime from \"date-time\";\n\nexport default data => {\n  let magList = [];\n  let magTypeList = [];\n  const extractedEarthquakeData = data.map(item => {\n    let extractedProperties = _.pick(item.properties, [\n      \"place\",\n      \"time\",\n      \"url\",\n      \"mag\",\n      \"magType\"\n    ]);\n    extractedProperties.id = item.id;\n    extractedProperties.timeFormatted = dateTime({\n      date: new Date(extractedProperties.time),\n      local: true,\n      showTimeZone: true\n    });\n    extractedProperties.geoType = item.geometry.type;\n    extractedProperties.geo = item.geometry.coordinates;\n    extractedProperties.magSelectionHook = Math.trunc(extractedProperties.mag);\n    magList.push(extractedProperties.magSelectionHook);\n    magTypeList.push(extractedProperties.magType);\n    return extractedProperties;\n  });\n  magList = _.sortBy(magList);\n  magList = _.sortedUniqBy(magList, Math.floor);\n  magTypeList = _.sortBy(magTypeList);\n  magTypeList = _.sortedUniqBy(magTypeList);\n  magTypeList = _.compact(magTypeList);\n\n  return { extractedEarthquakeData, magList, magTypeList };\n};\n","export default totalRecords => {\n  const maxPages = 20;\n  const maxRecordsPerPage = 1000;\n  const tryRecordsPerPage = [25, 50, 100, 200, 300, 500];\n\n  for (let current of tryRecordsPerPage) {\n    if (totalRecords / current <= maxPages) return current;\n  }\n  return maxRecordsPerPage;\n};\n","import _ from \"lodash\";\nimport { paginate } from \"../utils/paginate\";\nimport dynamicPageSize from \"../utils/dynamicPagesize\";\n\nexport default paging => {\n  const {\n    currentpage,\n    earthquakedata: allData,\n    selectedMagitude,\n    selectedMagitudeType,\n    searchQuery,\n    sortcolumn\n  } = paging;\n  let filtered = allData;\n  console.log({ searchQuery, selectedMagitude, selectedMagitudeType });\n  if (searchQuery && searchQuery.length >= 1)\n    filtered = allData.filter(item =>\n      item.place.toLowerCase().includes(searchQuery.toLocaleLowerCase())\n    );\n  else if (selectedMagitude !== \"\")\n    filtered = allData.filter(\n      item => item.magSelectionHook === selectedMagitude\n    );\n  else if (selectedMagitudeType !== \"\")\n    filtered = allData.filter(item => item.magType === selectedMagitudeType);\n\n  const sorted = _.orderBy(filtered, [sortcolumn.path], [sortcolumn.order]);\n  const filteredCount = filtered ? filtered.length : 0;\n  const pagesize = dynamicPageSize(filteredCount);\n  const pagedData = paginate(sorted, currentpage, pagesize);\n  return { filteredCount, pagedData, pagesize };\n};\n","import _ from \"lodash\";\n\nexport function paginate(items, pageNumber = 1, pageSize = 25) {\n  const startIndex = (pageNumber - 1) * pageSize;\n  return _.drop(items, startIndex).slice(0, pageSize);\n}\n","import React, { Fragment } from \"react\";\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport moment from \"moment\";\n\nexport default ({\n  fromDate,\n  toDate,\n  onChangeFromDate,\n  onChangeToDate,\n  onSubmit\n}) => {\n  return (\n    <Fragment>\n      <h5>\n        Please select period from/to dates then press Submit for a new selection\n      </h5>\n      <form onSubmit={e => onSubmit(e)}>\n        <div className=\"row\">\n          <div className=\"form-group col-3\">\n            <label htmlFor=\"fromDate\">From Date</label>\n            <DayPickerInput\n              placeholder={fromDate}\n              onDayChange={day =>\n                onChangeFromDate(moment(day).format(\"YYYY-MM-DD\"))\n              }\n            />\n          </div>\n\n          <div className=\"form-group col-3\">\n            <label htmlFor=\"toDate\">To Date</label>\n            <DayPickerInput\n              placeholder={toDate}\n              onDayChange={day =>\n                onChangeToDate(moment(day).format(\"YYYY-MM-DD\"))\n              }\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-2\">\n            <button className=\"btn btn-primary\" type=\"submit\">\n              Submit\n            </button>\n          </div>\n        </div>\n      </form>\n      <hr />\n    </Fragment>\n  );\n};\n","import React from \"react\";\n\nconst SearchBox = ({ value, onChange, label }) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor=\"query\">{label}</label>\n      <input\n        type=\"text\"\n        name=\"query\"\n        className=\"form-control my-3\"\n        placeholder=\"Search..\"\n        value={value}\n        onChange={e => onChange(e.currentTarget.value)}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\nimport Select from \"react-select\";\n\nconst SelectReact = ({ name, label, options, value, ...rest }) => {\n  const optionsReact = options.map(option => {\n    let newOption = {};\n    newOption.value = option;\n    newOption.label = option;\n    return newOption;\n  });\n\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <Select\n        {...rest}\n        value={optionsReact.filter(option => option.value === value)}\n        name={name}\n        id={name}\n        options={optionsReact}\n      />\n    </div>\n  );\n};\n\nexport default SelectReact;\n","import React, { Fragment } from \"react\";\nimport SearchBox from \"./common/searchBox\";\nimport SelectReact from \"./common/selectReact\";\n\nexport default ({\n  selectedMagitude,\n  onChangeMagitude,\n  optionsMagList,\n  selectedMagitudeType,\n  onChangeMagitudeType,\n  optionsMagTypeList,\n  searchQuery,\n  onChangeSearchQuery\n}) => {\n  return (\n    <Fragment>\n      <h5>Select/Search to filter table</h5>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <SelectReact\n            value={selectedMagitude}\n            onChange={e => onChangeMagitude(e)}\n            label=\"Select Magitude\"\n            options={optionsMagList}\n          />\n        </div>\n        <div className=\"col-6\">\n          <SelectReact\n            value={selectedMagitudeType}\n            onChange={e => onChangeMagitudeType(e)}\n            label=\"Select Magitude Type\"\n            options={optionsMagTypeList}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-3\" />\n        <div className=\"col-6\">\n          <SearchBox\n            value={searchQuery}\n            onChange={e => onChangeSearchQuery(e)}\n            label={\"Search by Location\"}\n          />\n        </div>\n        <div className=\"col-3\" />\n      </div>\n    </Fragment>\n  );\n};\n","import React, { useState, Fragment } from \"react\";\nimport EarthquakesTable from \"./earthquakesTable\";\nimport Pagination from \"./common/pagination\";\nimport useFetchEarthquakeData from \"../hooks/useFetchEarthquakeData\";\nimport usePagingEarthquakes from \"../hooks/usePagingEarthquakes\";\nimport EarthquakeDateRangeInput from \"./earthquakeDateRangeInput\";\nimport EarthquakeTableFilter from \"./earthquakeTableFilter\";\nimport moment from \"moment\";\n\nexport default props => {\n  /**Declare */\n  const defaultDaysFromToday = 3;\n  const defaultStartDate = moment()\n    .subtract(defaultDaysFromToday, \"d\")\n    .format(\"YYYY-MM-DD\");\n\n  /**States */\n  const defaultEndDate = moment().format(\"YYYY-MM-DD\");\n  const [starttime, setStarttime] = useState(defaultStartDate);\n  const [endtime, setEndtime] = useState(defaultEndDate);\n  const [startTimeInput, setStartTimeInput] = useState(starttime);\n  const [endTimeInput, setEndtimeTimeInput] = useState(endtime);\n  const [selectedMagitude, setSelectedMagitude] = useState(\"\");\n  const [selectedMagitudeType, setSelectedMagitudeType] = useState(\"\");\n  const [currentpage, setCurrentpage] = useState(1);\n  const [sortcolumn, setSortcolumn] = useState({ path: \"place\", order: \"asc\" });\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  /**Custom Hooks */\n  const {\n    title,\n    earthquakedata,\n    loading,\n    count,\n    magList,\n    magTypeList\n  } = useFetchEarthquakeData([starttime, endtime]);\n\n  const { pagedEarthquakeData, filteredcount, pagesize } = usePagingEarthquakes(\n    [\n      earthquakedata,\n      currentpage,\n      sortcolumn,\n      searchQuery,\n      selectedMagitude,\n      selectedMagitudeType\n    ]\n  );\n\n  /**Events */\n  function handlePageChange(page) {\n    console.log(\"handlePageChange()\", page);\n    setCurrentpage(page);\n  }\n\n  function handleSort(sortColumn) {\n    console.log(\"handleSort()\", sortColumn);\n    setSortcolumn(sortColumn);\n  }\n  function handleSearch(searchQuery) {\n    console.log(\"handleSearch()\", searchQuery);\n    setSearchQuery(searchQuery);\n    setSelectedMagitude(\"\");\n    setSelectedMagitudeType(\"\");\n    setCurrentpage(1);\n  }\n\n  function handleSelectMagitude({ value }) {\n    console.log(\"handleSelectMagitude()\", value);\n    setSelectedMagitude(value);\n    setSelectedMagitudeType(\"\");\n    setSearchQuery(\"\");\n    setCurrentpage(1);\n  }\n\n  function handleSelectMagitudeType({ value }) {\n    console.log(\"handleSelectMagitudeType()\", value);\n    setSelectedMagitudeType(value);\n    setSelectedMagitude(\"\");\n    setSearchQuery(\"\");\n    setCurrentpage(1);\n  }\n\n  function handleStartTime(starttime) {\n    console.log(\"handleStartTime()\", starttime);\n    setStartTimeInput(starttime);\n  }\n\n  function handleEndTime(endtime) {\n    console.log(\"handleEndTime()\", endtime);\n    setEndtimeTimeInput(endtime);\n  }\n\n  function handleSubmit(event) {\n    setEndtime(endTimeInput);\n    setStarttime(startTimeInput);\n    setCurrentpage(1);\n    event.preventDefault();\n  }\n  /**Render Components */\n  return (\n    <Fragment>\n      <div>\n        <h3>{title}</h3>\n      </div>\n      <EarthquakeDateRangeInput\n        fromDate={startTimeInput}\n        toDate={endTimeInput}\n        onChangeFromDate={handleStartTime}\n        onChangeToDate={handleEndTime}\n        onSubmit={handleSubmit}\n      />\n      <EarthquakeTableFilter\n        selectedMagitude={selectedMagitude}\n        onChangeMagitude={handleSelectMagitude}\n        optionsMagList={magList}\n        selectedMagitudeType={selectedMagitudeType}\n        onChangeMagitudeType={handleSelectMagitudeType}\n        optionsMagTypeList={magTypeList}\n        searchQuery={searchQuery}\n        onChangeSearchQuery={handleSearch}\n      />\n      <div>\n        {loading ? (\n          <div>\n            {\" \"}\n            <h2>Loading</h2>\n          </div>\n        ) : filteredcount ? (\n          <Fragment>\n            <p>\n              Total Events: {count} Filtered Events: {filteredcount}{\" \"}\n            </p>\n            <Pagination\n              itemsCount={filteredcount}\n              pageSize={pagesize}\n              currentPage={currentpage}\n              onPageChange={handlePageChange}\n            />\n\n            <EarthquakesTable\n              earthquakedata={pagedEarthquakeData}\n              sortColumn={sortcolumn}\n              onSort={handleSort}\n            />\n\n            <Pagination\n              itemsCount={filteredcount}\n              pageSize={pagesize}\n              currentPage={currentpage}\n              onPageChange={handlePageChange}\n            />\n          </Fragment>\n        ) : (\n          <div>\n            <h2>Nothing to display</h2>\n          </div>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getEarthquakes } from \"../feeds/earthquakeQuery\";\nimport dateTime from \"date-time\";\nimport extractEarthquakeData from \"../dataProcessing/extractEarthquakeData\";\nimport { toast } from \"react-toastify\";\n\nexport default function useFetchEarthquakeData([starttime, endtime]) {\n  const queryString = `starttime=${starttime}&endtime=${endtime}`;\n\n  const [earthquakedata, setEarthquakedata] = useState([]);\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [magList, setMagList] = useState([]);\n  const [magTypeList, setMagTypeList] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n\n      console.log(\n        `Fetching earthquake data from server using query string: ${queryString}`\n      );\n      let result;\n      try {\n        result = await getEarthquakes(queryString);\n      } catch (e) {\n        toast.error(e.response.data);\n        return;\n      }\n\n      const { features: data, metadata } = result.data;\n\n      const {\n        extractedEarthquakeData,\n        magList,\n        magTypeList\n      } = extractEarthquakeData(data);\n\n      setEarthquakedata(extractedEarthquakeData);\n      setMagList(magList);\n      setMagTypeList(magTypeList);\n      setCount(metadata.count);\n      setTitle(\n        `${metadata.title} - Report generated as at ${dateTime({\n          date: new Date(metadata.generated),\n          local: true,\n          showTimeZone: true\n        })}`\n      );\n      setLoading(false);\n    }\n\n    fetchData();\n  }, [starttime, endtime, queryString]);\n\n  return { earthquakedata, count, loading, title, magList, magTypeList };\n}\n","import { useState, useEffect } from \"react\";\nimport paging from \"../dataProcessing/pagingEarthquakeData\";\n\nexport default function usePaging([\n  earthquakedata,\n  currentpage,\n  sortcolumn,\n  searchQuery,\n  selectedMagitude,\n  selectedMagitudeType\n]) {\n  //const pagesize = 500;\n  const [pagedEarthquakeData, setPagedEarthquakedata] = useState([]);\n  const [filteredcount, setFilteredcount] = useState(0);\n  const [pagesize, setPagesize] = useState(0);\n\n  useEffect(() => {\n    console.log(currentpage, sortcolumn);\n\n    const { filteredCount, pagedData, pagesize } = paging({\n      earthquakedata,\n      selectedMagitude,\n      selectedMagitudeType,\n      currentpage,\n      searchQuery,\n      sortcolumn\n    });\n\n    console.log(pagesize);\n    setPagedEarthquakedata(pagedData);\n\n    setFilteredcount(filteredCount);\n    setPagesize(pagesize);\n  }, [\n    earthquakedata,\n    currentpage,\n    sortcolumn,\n    searchQuery,\n    selectedMagitude,\n    selectedMagitudeType\n  ]);\n  return { pagedEarthquakeData, filteredcount, pagesize };\n}\n","import React, { Component, Fragment } from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\n\nimport Earthquakes from \"./components/earthquakes\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCaretUp, faCaretDown } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faCaretUp, faCaretDown);\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <Fragment>\n        <ToastContainer />\n        <main className=\"container\">\n          <Switch>\n            <Route path=\"/earthquakes\" component={Earthquakes} />\n            <Redirect exact from=\"/\" to=\"/earthquakes\" />\n            <Redirect to=\"/earthquakes\" />\n          </Switch>\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}